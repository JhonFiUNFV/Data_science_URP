#Limpiar y direccionar el set de datos.
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
data_churn.csv <- read.csv("DataChurn.csv",sep= ";")
View(data_churn.csv)
View(data_churn.csv)
data_churn.csv <- read.csv("DataChurn.csv",sep= ",")
View(data_churn.csv)
View(data_churn.csv)
str(data_churn.csv)
install.packages('data.table')  # 1.- Instalar
loan_pred <-fread("DataChurn.csv",
header=T,
verbose =FALSE,
stringsAsFactors=TRUE,
showProgress =TRUE)
library(data.table)
loan_pred <-fread("DataChurn.csv",
header=T,
verbose =FALSE,
stringsAsFactors=TRUE,
showProgress =TRUE)
str(loan_pred)
str(data_churn.csv)
#Limpiar y direccionar el set de datos.
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
data_churn.csv <- read.csv("DataChurn.csv",sep= ",")
View(data_churn.csv)
str(data_churn.csv)
View(data_churn.csv)
View(data_churn.csv)
barplot(data_churn.csv$SEXO, data_churn.csv$CIVIL)
#Limpiar y direccionar el set de datos.
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
data <- read.csv("DataChurn.csv",sep= ",")
View(data)
str(data)
#Deteccion de missing
plot_missing(data)
library(DataExplorer)
#Deteccion de missing
plot_missing(data)
churn <-fread("DataChurn.csv",
header=T,
verbose =FALSE,
stringsAsFactors=TRUE,
showProgress =TRUE)
str(churn)
#Deteccion de missing
plot_missing(churn)
barplot(churn)
Europa=read.csv("Europa.csv", header=TRUE)
#---------------------------------------------------------
# Para limpiar el workspace, por si hubiera algun dataset
# o informacion cargada
rm(list = ls())
#---------------------------------------------------------
# Cambiar el directorio de trabajo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
Europa=read.csv("Europa.csv", header=TRUE)
View(Europa)
head(Europa, 10)
Europa2=Europa[,2:8] # Hacemos un subset!
head(Europa2, 3)
cor(Europa2, method = "spearma") # Vemos las correlaciones
View(Europa2)
#---------------------------------------------------------
# Para limpiar el workspace, por si hubiera algun dataset
# o informacion cargada
rm(list = ls())
#---------------------------------------------------------
# Cambiar el directorio de trabajo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#Introducimos nuestros datos
data.stroke <- read.csv("HealthAnalytics.csv",
sep=",",na.strings=c(""))
# Es muy importantes revisar el tipo de datos!
str(data.stroke)
# De ser necesario codificamos:
data.stroke$stroke <-       as.factor(data.stroke$stroke)
View(data.stroke)
# Es muy importantes revisar el tipo de datos!
str(data.stroke)
data.stroke$hypertension <- as.factor(data.stroke$hypertension)
data.stroke$heart_disease <- as.factor(data.stroke$heart_disease)
View(data.stroke)
# Deteccion de valores perdidos con el paquete DataExplorer
library(DataExplorer)
plot_missing(data.stroke)
# Para ver las variables con valores perdidos
which(colSums(is.na(data.stroke))!=0)
# Para ver cuantas filas tienen valores perdidos
rmiss <- which(rowSums(is.na(data.stroke))!=0,arr.ind=T)
length(rmiss)
# Para ver el porcentaje de filas con valores perdidos
length(rmiss)*100/dim(data.stroke)[1]
# Para graficar la cantidad de valores perdidos
library(VIM)
windows()
valores.perdidos <- aggr(data.stroke,numbers=T)
valores.perdidos
summary(valores.perdidos)
#----------------------------------------------------
# Opcion 01: Eliminacion de datos perdidos
library(funModeling)
summary(valores.perdidos)
#---------------------------------------------------------
# Para limpiar el workspace, por si hubiera algun dataset
# o informacion cargada
rm(list = ls())
#---------------------------------------------------------
# Cambiar el directorio de trabajo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#Introducimos nuestros datos
data.stroke <- read.csv("HealthAnalytics.csv",
sep=",",na.strings=c(""))
# Es muy importantes revisar el tipo de datos!
str(data.stroke)
# De ser necesario codificamos:
data.stroke$stroke <-       as.factor(data.stroke$stroke)
data.stroke$hypertension <- as.factor(data.stroke$hypertension)
data.stroke$heart_disease <- as.factor(data.stroke$heart_disease)
# Deteccion de valores perdidos con el paquete DataExplorer
library(DataExplorer)
plot_missing(data.stroke)
# Para ver las variables con valores perdidos
which(colSums(is.na(data.stroke))!=0)
# Para ver cuantas filas tienen valores perdidos
rmiss <- which(rowSums(is.na(data.stroke))!=0,arr.ind=T)
length(rmiss)
# Para ver el porcentaje de filas con valores perdidos
length(rmiss)*100/dim(data.stroke)[1]
# Para graficar la cantidad de valores perdidos
library(VIM)
valores.perdidos <- aggr(data.stroke,numbers=T)
valores.perdidos
summary(valores.perdidos)
#----------------------------------------------------
# Opcion 01: Eliminacion de datos perdidos
library(funModeling)
data.stroke.cl <- na.omit(data.stroke)
plot_missing(data.stroke.cl)
# Analisis Descriptivos Univariados
# Antes de imputar y despues  / OJO !!!
# Cambia la distribucion de las variables / Estabilidad poblacion / PSI
df_ad<- profiling_num(data.stroke.cl)
#---------------------------------------------
# Opcion 02:Imputacion con el paquete DMwR / Parametrica o Univariada
# Computacionalmente es poco costoso.
library(DMwR)
data.stroke.ci <-centralImputation(data.stroke)
plot_missing(data.stroke.ci)
# Revisemos primero a nivel grafico!
windows()
ggplot(data.stroke.ci,aes(stroke, avg_glucose_level, colour = stroke ))+geom_point() + geom_boxplot()
View(data.stroke.ci)
clc
clcr
clear
clearl
ctrl
#---------------------------------------------------------
# Para limpiar el workspace, por si hubiera algun dataset
# o informacion cargada
rm(list = ls())
#---------------------------------------------------------
# Cambiar el directorio de trabajo
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#Introducimos nuestros datos
data.stroke <- read.csv("HealthAnalytics.csv",
sep=",",na.strings=c(""))
# Es muy importantes revisar el tipo de datos!
str(data.stroke)
# De ser necesario codificamos:
data.stroke$stroke <-       as.factor(data.stroke$stroke)
data.stroke$hypertension <- as.factor(data.stroke$hypertension)
data.stroke$heart_disease <- as.factor(data.stroke$heart_disease)
# Deteccion de valores perdidos con el paquete DataExplorer
library(DataExplorer)
plot_missing(data.stroke)
# Para ver las variables con valores perdidos
which(colSums(is.na(data.stroke))!=0)
# Para ver cuantas filas tienen valores perdidos
rmiss <- which(rowSums(is.na(data.stroke))!=0,arr.ind=T)
length(rmiss)
# Para ver el porcentaje de filas con valores perdidos
length(rmiss)*100/dim(data.stroke)[1]
# Para graficar la cantidad de valores perdidos
library(VIM)
windows()
valores.perdidos <- aggr(data.stroke,numbers=T)
valores.perdidos
summary(valores.perdidos)
#----------------------------------------------------
# Opcion 01: Eliminacion de datos perdidos
library(funModeling)
data.stroke.cl <- na.omit(data.stroke)
plot_missing(data.stroke.cl)
# Analisis Descriptivos Univariados
# Antes de imputar y despues  / OJO !!!
# Cambia la distribucion de las variables / Estabilidad poblacion / PSI
df_ad<- profiling_num(data.stroke.cl)
#---------------------------------------------
# Opcion 02:Imputacion con el paquete DMwR / Parametrica o Univariada
# Computacionalmente es poco costoso.
library(DMwR)
data.stroke.ci <-centralImputation(data.stroke)
plot_missing(data.stroke.ci)
# Revisemos primero a nivel grafico!
windows()
ggplot(data.stroke.ci,aes(stroke, avg_glucose_level, colour = stroke ))+geom_point() + geom_boxplot()
# Prueba de hipÃ³tesis
# H0: No exite diferencias en los niveles de glucosa
# H1: Existen difrencias en los niveles de glucosa en la sangre en las personas
# que no tuvieron stroke respecto a los que si tuvieron
anova1 <- aov(avg_glucose_level~stroke,data = data.stroke.ci) #Aplicamos el ANOVA PARAMETRICO
summary(anova1) #Nos brinda un resumen del ANOVA
library(DataExplorer)
library(data.table)
#Limpiar y direccionar el set de datos.
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
data <- read.csv("DataChurn.csv",sep= ",")
View(data)
str(data)
churn <-fread("DataChurn.csv",
header=T,
verbose =FALSE,
stringsAsFactors=TRUE,
showProgress =TRUE)
str(churn)
#Deteccion de missing
plot_missing(churn)
View(churn)
#Variables Cualitativas
churn$auto <- as.factor(churn$auto)
View(churn)
#Limpiar y direccionar el set de datos.
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
data <- read.csv("DataChurn.csv",sep= ",")
View(data)
str(data)
churn <-fread("DataChurn.csv",
header=T,
verbose =FALSE,
stringsAsFactors=TRUE,
showProgress =TRUE)
str(churn)
#Deteccion de missing
plot_missing(churn)
View(churn)
#Limpiar y direccionar el set de datos.
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
data <- read.csv("DataChurn.csv",sep= ",")
View(data)
str(data)
data_churn <-fread("DataChurn.csv",
header=T,
verbose =FALSE,
stringsAsFactors=TRUE,
showProgress =TRUE)
str(data_churn)
ggplot(data_churn ,aes(churn, ingreso, colour = churn ))+geom_point() + geom_boxplot()
ggplot(data_churn ,aes(CHURN, INGRESO, colour = CHURN ))+geom_point() + geom_boxplot()
library(scatterplot3d)
scatterplot3d(data_churn$INGRESO, data_churn$SEXO, data_churn$CHURN, color=c("red", "green", "blue")[unclass(data_churn[,5])])
# Anova
anova1 <- aov(INGRESO~CHURN,data = data_churn)
summary(anova1)
par(mfrow=c(2,2)) #Particiona mi ventana grafica
plot(anova1) #Contrasta los supuestos del ANOVA, de forma grafica
library(moments)
agostino.test(data.stroke.ci$avg_glucose_level)
agostino.test(data_churn$INGRESO)
